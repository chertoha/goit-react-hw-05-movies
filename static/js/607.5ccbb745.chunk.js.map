{"version":3,"file":"static/js/607.5ccbb745.chunk.js","mappings":"8LAiBA,EAdmB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAC9B,OACE,SAACC,EAAA,EAAD,CAAKD,MAAOA,EAAZ,UACE,gBAAKF,IAAKA,EAAKC,IAAKA,EAAKC,MAAOA,KAGrC,C,sHCPYE,GAAOC,EAAAA,EAAAA,IAAO,KAAPA,CAAH,kHAGE,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAOPC,GAAOJ,EAAAA,EAAAA,IAAO,MAAPA,CAAH,6CACA,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGLE,GAAYL,EAAAA,EAAAA,IAAO,IAAPA,CAAH,mIAEP,SAAAC,GAAC,OAAIA,EAAEC,MAAMI,UAAUC,EAAtB,IAEG,SAAAN,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAOPK,GAAQR,EAAAA,EAAAA,IAAO,OAAPA,CAAH,6CACD,SAAAC,GAAC,OAAIA,EAAEC,MAAMO,YAAYC,MAAxB,I,SCLlB,EApBkB,SAAC,GAAiD,IAAD,IAA9CC,KAAAA,OAA8C,MAAvC,UAAuC,MAA5BC,UAAAA,OAA4B,MAAhB,UAAgB,EACjE,OACE,UAACR,EAAD,YACE,UAACC,EAAD,YACE,SAACG,EAAD,2BACCG,MAEH,UAACN,EAAD,YACE,SAACG,EAAD,2BACCI,OAIR,E,uCCDD,EAXsB,SAAAC,GACpB,OAAQA,GACN,KAAK,EACH,OAAOC,EACT,KAAK,EACH,OAAOC,EACT,QACE,OAAOC,EAEZ,E,UCsCD,EA3CiB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAGlB,OAAoB,IAAhBA,EAAKC,QACA,2EAIP,SAACpB,EAAA,EAAD,CAAKqB,GAAG,KAAKC,GAAI,EAAjB,SACGH,EAAKI,KACJ,YAMO,IALLC,EAKI,EALJA,UAKI,IAJJC,OAAAA,OAII,MAJK,EAIL,MAHJZ,KAAAA,OAGI,MAHG,UAGH,MAFJC,UAAAA,OAEI,MAFQ,UAER,EADJY,EACI,EADJA,aAEMC,EAAWD,EACbE,EAAAA,GAAeF,EACfG,EAAcJ,GAElB,OACE,UAACxB,EAAD,YACE,SAAC6B,EAAA,EAAD,CAAYjC,IAAK8B,EAAU7B,IAAKe,EAAMd,MAAO,OAC7C,SAAC,EAAD,CAAWc,KAAMA,EAAMC,UAAWA,MAFzBU,EAKd,KAIR,E,uCCHD,EA7Ba,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOd,EAAP,KAAae,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAASE,EAAAA,GAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACRH,EAAUF,EAAAA,GAAAA,UACVM,EAAAA,EAAAA,IAAUV,GACPW,MAAK,SAAAC,GAEJN,EAAUF,EAAAA,GAAAA,UACVD,EAAQS,EACT,IACAC,OAAM,SAAAN,GACLC,EAASD,EAAMO,SACfR,EAAUF,EAAAA,GAAAA,SACX,GACJ,GAAE,CAACJ,KAKF,SAACe,EAAA,EAAD,CAAmBV,OAAQA,EAAQE,MAAOA,EAA1C,UACE,SAAC,EAAD,CAAUnB,KAAMA,KAGrB,C","sources":["components/MovieImage/MovieImage.js","pages/Cast/CastList.styled.js","pages/Cast/ActorMeta.js","utils/defaultAvatar.js","pages/Cast/CastList.js","pages/Cast/Cast.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport Box from 'components/Box';\n\nconst MovieImage = ({ src, alt, width }) => {\n  return (\n    <Box width={width}>\n      <img src={src} alt={alt} width={width} />\n    </Box>\n  );\n};\n\nMovieImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  width: PropTypes.number,\n};\n\nexport default MovieImage;\n","import styled from 'styled-components';\n\nexport const Item = styled('li')`\n  display: flex;\n\n  margin-bottom: ${p => p.theme.space[5]};\n\n  :last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const Meta = styled('div')`\n  margin-left: ${p => p.theme.space[4]};\n`;\n\nexport const Paragraph = styled('p')`\n  margin: 0;\n  font-size: ${p => p.theme.fontSizes.lg};\n\n  margin-bottom: ${p => p.theme.space[3]};\n\n  :last-of-type {\n    margin-bottom: 0;\n  }\n`;\n\nexport const Label = styled('span')`\n  font-weight: ${p => p.theme.fontWeights.bolder};\n`;\n","import PropTypes from 'prop-types';\nimport { Meta, Paragraph, Label } from './CastList.styled';\n\nconst ActorMeta = ({ name = 'No info', character = 'No info' }) => {\n  return (\n    <Meta>\n      <Paragraph>\n        <Label>Actor name: </Label>\n        {name}\n      </Paragraph>\n      <Paragraph>\n        <Label>Charachter: </Label>\n        {character}\n      </Paragraph>\n    </Meta>\n  );\n};\n\nActorMeta.propTypes = {\n  name: PropTypes.string,\n  character: PropTypes.string,\n};\n\nexport default ActorMeta;\n","import womanDefaultImage from 'images/defautl-woman.jpg';\nimport manDefaultImage from 'images/default-man.png';\nimport noGenderDefaultImage from 'images/default-no-gender.png';\n\nconst defautlAvatar = genderId => {\n  switch (genderId) {\n    case 1:\n      return womanDefaultImage;\n    case 2:\n      return manDefaultImage;\n    default:\n      return noGenderDefaultImage;\n  }\n};\n\nexport default defautlAvatar;\n","import PropTypes from 'prop-types';\nimport Box from 'components/Box';\nimport ActorMeta from './ActorMeta';\nimport MovieImage from 'components/MovieImage';\nimport defautlAvatar from 'utils/defaultAvatar';\nimport { BASE_IMG_URL } from 'utils/config';\nimport { Item } from './CastList.styled';\n\nconst CastList = ({ cast }) => {\n  // console.log(cast);\n\n  if (cast.length === 0) {\n    return <p>We don't have cast information for this movie.</p>;\n  }\n\n  return (\n    <Box as=\"ul\" pt={5}>\n      {cast.map(\n        ({\n          credit_id,\n          gender = 0,\n          name = 'No info',\n          character = 'No info',\n          profile_path,\n        }) => {\n          const imageSrc = profile_path\n            ? BASE_IMG_URL + profile_path\n            : defautlAvatar(gender);\n\n          return (\n            <Item key={credit_id}>\n              <MovieImage src={imageSrc} alt={name} width={100} />\n              <ActorMeta name={name} character={character} />\n            </Item>\n          );\n        }\n      )}\n    </Box>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      credit_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n        .isRequired,\n      gender: PropTypes.number,\n    })\n  ),\n};\n\nexport default CastList;\n","import CastList from './CastList';\nimport StatusListWrapper from 'components/StatusListWrapper';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { movieCast } from 'services/movieDatabaseApi';\nimport { STATUS } from 'utils/config';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setStatus(STATUS.PENDING);\n    movieCast(movieId)\n      .then(result => {\n        // throw new Error('Test error');\n        setStatus(STATUS.RESOLVED);\n        setCast(result);\n      })\n      .catch(error => {\n        setError(error.message);\n        setStatus(STATUS.REJECTED);\n      });\n  }, [movieId]);\n\n  // console.log(cast);\n\n  return (\n    <StatusListWrapper status={status} error={error}>\n      <CastList cast={cast} />\n    </StatusListWrapper>\n  );\n};\n\nexport default Cast;\n"],"names":["src","alt","width","Box","Item","styled","p","theme","space","Meta","Paragraph","fontSizes","lg","Label","fontWeights","bolder","name","character","genderId","womanDefaultImage","manDefaultImage","noGenderDefaultImage","cast","length","as","pt","map","credit_id","gender","profile_path","imageSrc","BASE_IMG_URL","defautlAvatar","MovieImage","movieId","useParams","useState","setCast","STATUS","status","setStatus","error","setError","useEffect","movieCast","then","result","catch","message","StatusListWrapper"],"sourceRoot":""}